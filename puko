#!/usr/bin/env php
<?php
if (PHP_SAPI !== 'cli') {
    die('You are not allowed to perform this action');
}

$command = $argv[0];
$entity = isset($argv[1]) ? $argv[1] : null;
$parameter = isset($argv[2]) ? $argv[2] : null;

if ($entity === null && $parameter === null) {
    help();
}

switch ($entity) {
    case "setup":
        setup($parameter);
        break;
    case "modules":
        //TODO: modules cli generator
        echo "\ncoming soon\n";
        exit;
        break;
    case "help":
        help();
        break;
    case "version":
        version();
        break;
    case "serve":
        echo "Puko project initialized at localhost:8000\n";
        echo "Press Ctrl + C to stop\n";
        echo exec('php -S localhost:8000 routes.php');
    default:
        exit('command not supported');
        break;
}

function setup($parameter)
{
    switch ($parameter) {
        case "db":
            database();
            break;
        case "secure":
            secure();
            break;
        default:
            break;
    }
}

function database()
{
    echo "\nStart database initialization ...\n\n";
    echo "host name    : ";
    $host = preg_replace('/\s+/', '', fgets(STDIN));
    echo "host port    : ";
    $port = preg_replace('/\s+/', '', fgets(STDIN));
    echo "username     : ";
    $user = preg_replace('/\s+/', '', fgets(STDIN));
    echo "password     : ";
    $pass = preg_replace('/\s+/', '', fgets(STDIN));
    echo "database name: ";
    $dbName = preg_replace('/\s+/', '', fgets(STDIN));

    try {

        $pdoConnection = "mysql:host=$host;port=$port;dbname=$dbName";

        $dbi = new PDO($pdoConnection, $user, $pass);
        $dbi->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        $table_list = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES
                       WHERE TABLE_NAME like '%' AND TABLE_SCHEMA = '$dbName'";

        $statement = $dbi->prepare($table_list);
        $statement->execute();
        $table = $statement->fetchAll(PDO::FETCH_ASSOC);

        echo "\n";

        foreach ($table as $key => $value) {
            echo "Creating model " . $value['TABLE_NAME'] . ".php\n";
            $model_file = <<<'EOT'
<?php
namespace model\base;

use pukoframework\pda\DBI;

class {?}
{
    public static function Create($data)
    {
        return DBI::Prepare('{?}')->Save($data);
    }

    public static function Update($where, $data)
    {
        return DBI::Prepare('{?}')->Update($where, $data);
    }

    public static function GetAll()
    {
        return DBI::Prepare('SELECT * FROM {?}')->GetData();
    }

}
EOT;
            $model_file = str_replace('{?}', $value['TABLE_NAME'], $model_file);
            if (!is_dir('model/base')) {
              mkdir('model/base');
            }
            file_put_contents("model/base/".$value['TABLE_NAME'].".php", $model_file);
        }


    } catch (PDOException $e) {

        echo "\nConnection failed: " . $e->getMessage();
        echo "\n";
        database();

    }
    $configuration = <<<PHP
<?php return [
    'dbType' => 'mysql',
    'host'   => '$host',
    'user'   => '$user',
    'pass'   => '$pass',
    'dbName' => '$dbName',
    'port'   => $port,
];
PHP;

    file_put_contents("config/database.php", $configuration);

    echo "\n... initialization completed.\n\n";
    exit;
}

function secure()
{
    echo "\nStart AES-256 secure initialization ...\n\n";
    echo "identifier   : ";
    $identifier = preg_replace('/\s+/', '', fgets(STDIN));
    echo "secure key   : ";
    $key = preg_replace('/\s+/', '', fgets(STDIN));
    echo "cookies name : ";
    $cookies = preg_replace('/\s+/', '', fgets(STDIN));

    $configuration = <<<PHP
<?php return [
    'method'     => 'AES-256-CBC',
    'key'        => '$key',
    'identifier' => '$identifier',
    'cookies'    => '$cookies',
];
PHP;

    file_put_contents("config/encryption.php", $configuration);

    echo "\n... initialization completed.\n\n";
    exit;
}

function help()
{
    echo "\npukoframework console commands list:\n";
    echo "  setup    Setup puko framework installation\n";
    echo "  serve    Start puko on localhost:8000\n";
    echo "  modules  Create new puko framework modules\n";
    echo "  help     Show help menu\n";
    echo "  version  Show console version\n";
    exit;
}

function version()
{
    echo "\npukoframework console\n";
    echo "version 0.0.1-beta\n";
    exit;
}